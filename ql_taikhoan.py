import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import mysql.connector
import openpyxl
import matplotlib.pyplot as plt
from io import BytesIO
from PIL import Image, ImageTk


class QuanLyTaiKhoan:
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        self.cursor = db.cursor()
        self.create_ui()
        self.load_giao_vien()
        self.load_data()

    def create_ui(self):
        tk.Label(self.parent, text="Qu·∫£n L√Ω T√†i Kho·∫£n", font=("Arial", 16, "bold"), fg="white", bg="blue").pack(pady=10, fill=tk.X)

        # T·∫°o Notebook ch·ª©a 2 tab
        self.notebook = ttk.Notebook(self.parent)
        self.notebook.pack(expand=True, fill=tk.BOTH)

        # Frame cho Gi√°o Vi√™n
        self.giaovien_frame = tk.Frame(self.notebook, bg="lightgray", padx=10, pady=10)
        self.notebook.add(self.giaovien_frame, text="Gi·∫£ng vi√™n")

        # Frame cho Sinh Vi√™n
        self.sinhvien_frame = tk.Frame(self.notebook, bg="lightgray", padx=10, pady=10)
        self.notebook.add(self.sinhvien_frame, text="Sinh Vi√™n")

        # Giao di·ªán qu·∫£n l√Ω t√†i kho·∫£n Gi√°o Vi√™n
        self.create_giaovien_ui()
        self.create_sinhvien_ui()

    def create_giaovien_ui(self):
        self.giaovien_frame.configure(bg="lightgray")

        tk.Label(self.giaovien_frame, text="Gi·∫£ng vi√™n", font=("Arial", 18, "bold"), fg="black", bg="lightgray").grid(
            row=0, column=0, columnspan=2, pady=15)

        fields = [
            ("T√™n t√†i kho·∫£n:", "entry_taikhoan", "entry"),
            ("M·∫≠t kh·∫©u:", "entry_matkhau", "entry"),
            ("Quy·ªÅn h·∫°n:", "combobox_quyenhan", "combobox"),
            ("Gi√°o vi√™n:", "combobox_giaovien", "combobox")  # ƒê·ªïi t√™n ƒë·ªÉ nh·∫•t qu√°n
        ]

        self.entry_widgets = {}

        for i, (label_text, widget_name, widget_type) in enumerate(fields):
            tk.Label(self.giaovien_frame, text=label_text, bg="lightgray", font=("Arial", 12)).grid(
                row=i + 1, column=0, padx=10, pady=5, sticky="w"
            )

            if widget_type == "combobox":
                entry = ttk.Combobox(self.giaovien_frame, width=22, font=("Arial", 12), state="readonly")

                # ƒê·∫∑t gi√° tr·ªã cho combobox_quyenhan
                if widget_name == "combobox_quyenhan":
                    entry["values"] = ["Gi√°o vi√™n", "Admin"]  # Gi√° tr·ªã hi·ªÉn th·ªã
                    entry.current(0)  # Ch·ªçn m·∫∑c ƒë·ªãnh l√† Gi√°o vi√™n

            else:
                entry = tk.Entry(self.giaovien_frame, font=("Arial", 12))

            if widget_name == "entry_matkhau":
                entry.config(show="")

            entry.grid(row=i + 1, column=1, padx=10, pady=5, sticky="ew")

            self.entry_widgets[widget_name] = entry  # L∆∞u v√†o dictionary ƒë·ªÉ d·ªÖ qu·∫£n l√Ω

        button_frame = tk.Frame(self.giaovien_frame, bg="lightgray")
        button_frame.grid(row=5, column=0, columnspan=2, pady=15, sticky="ew")

        self.buttons = {}  # Dictionary ƒë·ªÉ l∆∞u c√°c button

        buttons = [
            ("Th√™m t√†i kho·∫£n", "green", self.add_account, "GV_btn_add"),
            ("S·ª≠a t√†i kho·∫£n", "orange", self.edit_account, "GV_btn_edit"),
            ("X√≥a t√†i kho·∫£n", "red", self.delete_account, "GV_btn_delete"),
            ("L√†m m·ªõi", "gray", self.refresh_data, "GV_btn_refresh")
        ]

        for i, (text, color, cmd, btn_name) in enumerate(buttons):
            btn = tk.Button(button_frame, text=text, bg=color, fg="white", font=("Arial", 12), width=12, command=cmd)
            btn.grid(row=0, column=i, padx=5)

            self.buttons[btn_name] = btn  # L∆∞u button v√†o dictionary v·ªõi ti·ªÅn t·ªë "GV_"

        filter_frame = tk.Frame(self.giaovien_frame)
        filter_frame.grid(row=6, column=0, columnspan=2, pady=5, sticky="nsew")

        tk.Label(filter_frame, text="T√¨m ki·∫øm t√†i kho·∫£n:").grid(row=0, column=0, padx=5)
        self.search_entry = tk.Entry(filter_frame)
        self.search_entry.grid(row=0, column=1, padx=5)
        tk.Button(filter_frame, text="üîç", command=self.search_account).grid(row=0, column=2, padx=5)

        tk.Button(filter_frame, text="Xu·∫•t Excel", command=self.export_to_excel).grid(row=0, column=6, padx=5)
        tk.Button(filter_frame, text="Th·ªëng k√™", command=self.show_statistics).grid(row=0, column=7, padx=5)

        # Th√™m c·ªôt "M·∫≠t kh·∫©u" v√†o Treeview
        columns = ("ID", "Username", "M·∫≠t kh·∫©u", "Quy·ªÅn H·∫°n", "Gi√°o Vi√™n")
        self.tree = ttk.Treeview(self.giaovien_frame, columns=columns, show="headings", height=8)
        self.tree.grid(row=7, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

        for col in columns:
            self.tree.heading(col, text=col, anchor="center")
            self.tree.column(col, width=160, anchor="center")

        self.tree.bind("<ButtonRelease-1>", self.on_treeview_select)

        self.giaovien_frame.grid_columnconfigure(0, weight=1)
        self.giaovien_frame.grid_columnconfigure(1, weight=1)
        self.load_giao_vien()
        self.load_data()

    def create_sinhvien_ui(self):
        self.sinhvien_frame.configure(bg="lightgray")

        tk.Label(self.sinhvien_frame, text="Sinh Vi√™n", font=("Arial", 18, "bold"), fg="black", bg="lightgray").grid(
            row=0, column=0, columnspan=2, pady=15)

        fields_SV = [
            ("T√™n t√†i kho·∫£n:", "entry_taikhoan"),
            ("M·∫≠t kh·∫©u:", "entry_matkhau"),
            ("Sinh Vi√™n:", "combobox_sinhvien")
        ]

        self.entry_widgets_SV = {}

        for i, (label_text, widget_name) in enumerate(fields_SV):
            tk.Label(self.sinhvien_frame, text=label_text, bg="lightgray", font=("Arial", 12)).grid(
                row=i + 1, column=0, padx=10, pady=5, sticky="w"
            )

            if "combobox" in widget_name:
                entry = ttk.Combobox(self.sinhvien_frame, width=22, font=("Arial", 12))
            else:
                entry = tk.Entry(self.sinhvien_frame, font=("Arial", 12))

            if widget_name == "entry_matkhau":
                entry.config(show="")

            entry.grid(row=i + 1, column=1, padx=10, pady=5, sticky="ew")

            self.entry_widgets_SV[widget_name] = entry  # L∆∞u v√†o dictionary ƒë·ªÉ qu·∫£n l√Ω d·ªÖ d√†ng

        button_frame = tk.Frame(self.sinhvien_frame, bg="lightgray")
        button_frame.grid(row=4, column=0, columnspan=2, pady=15, sticky="ew")

        # Dictionary ƒë·ªÉ l∆∞u c√°c button Sinh Vi√™n
        self.buttons_SV = {}

        # Danh s√°ch c√°c button v·ªõi th√¥ng tin: (T√™n hi·ªÉn th·ªã, M√†u s·∫Øc, H√†m x·ª≠ l√Ω, T√™n bi·∫øn)
        buttons_SV = [
            ("Th√™m t√†i kho·∫£n", "green", self.add_student, "btn_add_student"),
            ("S·ª≠a t√†i kho·∫£n", "orange", self.edit_student, "btn_edit_student"),
            ("X√≥a t√†i kho·∫£nn", "red", self.delete_student, "btn_delete_student"),
            ("L√†m m·ªõi", "gray", self.refresh_student_data, "btn_refresh_student")
        ]

        # T·∫°o v√† l∆∞u button v√†o dictionary
        for i, (text, color, cmd, btn_name) in enumerate(buttons_SV):
            btn = tk.Button(
                button_frame, text=text, bg=color, fg="white",
                font=("Arial", 12), width=12, command=cmd
            )
            btn.grid(row=0, column=i, padx=5)

            # L∆∞u button v√†o dictionary ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
            self.buttons_SV[btn_name] = btn
        filter_frame = tk.Frame(self.sinhvien_frame)
        filter_frame.grid(row=5, column=0, columnspan=2, pady=5, sticky="nsew")

        tk.Label(filter_frame, text="T√¨m ki·∫øm t√†i kho·∫£n:").grid(row=0, column=0, padx=5)
        self.search_student_entry = tk.Entry(filter_frame)
        self.search_student_entry.grid(row=0, column=1, padx=5)
        tk.Button(filter_frame, text="üîç", command=self.search_student).grid(row=0, column=2, padx=5)

        tk.Button(filter_frame, text="Xu·∫•t Excel", command=self.export_students_to_excel).grid(row=0, column=6, padx=5)
        tk.Button(filter_frame, text="Th·ªëng k√™", command=self.show_student_statistics).grid(row=0, column=7, padx=5)

        # Th√™m c·ªôt "M·∫≠t kh·∫©u" v√†o Treeview
        columns = ("ID", "Username", "M·∫≠t kh·∫©u", "Sinh Vi√™n")
        self.tree_sv = ttk.Treeview(self.sinhvien_frame, columns=columns, show="headings", height=8)
        self.tree_sv.grid(row=6, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

        for col in columns:
            self.tree_sv.heading(col, text=col, anchor="center")
            self.tree_sv.column(col, width=160, anchor="center")

        self.tree_sv.bind("<ButtonRelease-1>", self.on_treeview_select_student)

        self.sinhvien_frame.grid_columnconfigure(0, weight=1)
        self.sinhvien_frame.grid_columnconfigure(1, weight=1)

        self.load_sinh_vien()
        self.load_data_sv()

    def load_giao_vien(self):
        self.cursor.execute("SELECT ID_GIAOVIEN, TENGIAOVIEN FROM giaovien")
        self.giaovien_list = {row[1]: row[0] for row in self.cursor.fetchall()}

        # C·∫≠p nh·∫≠t danh s√°ch v√†o Combobox
        combobox = self.entry_widgets["combobox_giaovien"]
        combobox["values"] = list(self.giaovien_list.keys())  # G√°n danh s√°ch v√†o Combobox

    def load_data(self):
        """T·∫£i danh s√°ch t√†i kho·∫£n gi√°o vi√™n v√†o Treeview"""

        # X√≥a d·ªØ li·ªáu c≈© tr√™n tree tr∆∞·ªõc khi t·∫£i m·ªõi
        self.tree.delete(*self.tree.get_children())

        # Truy v·∫•n l·∫•y d·ªØ li·ªáu t√†i kho·∫£n gi√°o vi√™n, bao g·ªìm m·∫≠t kh·∫©u
        query = "SELECT ID_TKGV, USERNAME, PASSWORD, QUYENHAN, ID_GIAOVIEN FROM taikhoangv"
        self.cursor.execute(query)
        rows = self.cursor.fetchall()

        for row in rows:
            # Chuy·ªÉn ƒë·ªïi quy·ªÅn h·∫°n
            quyen = "Admin" if row[3] == 1 else "Gi√°o Vi√™n"

            # L·∫•y t√™n gi√°o vi√™n t·ª´ ID_GIAOVIEN
            giaovien_name = next((name for name, id_ in self.giaovien_list.items() if id_ == row[4]), "")

            # Hi·ªÉn th·ªã m·∫≠t kh·∫©u ƒë·∫ßy ƒë·ªß
            password = row[2]

            # Ch√®n d·ªØ li·ªáu v√†o b·∫£ng Treeview
            self.tree.insert("", "end", values=(row[0], row[1], password, quyen, giaovien_name))
    def add_account(self):
        username = self.entry_widgets["entry_taikhoan"].get().strip()
        password = self.entry_widgets["entry_matkhau"].get().strip()
        quyen = self.entry_widgets["combobox_quyenhan"].get()
        giaovien_name = self.entry_widgets["combobox_giaovien"].get()

        # Ki·ªÉm tra n·∫øu b·ªè tr·ªëng
        if not username or not password or not quyen or not giaovien_name:
            messagebox.showwarning("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return

        # Chuy·ªÉn ƒë·ªïi quy·ªÅn h·∫°n
        quyen_value = 1 if quyen == "Admin" else 0

        # Ki·ªÉm tra gi√°o vi√™n t·ªìn t·∫°i
        id_giaovien = self.giaovien_list.get(giaovien_name)
        if id_giaovien is None:
            messagebox.showwarning("L·ªói", f"Gi√°o vi√™n '{giaovien_name}' kh√¥ng t·ªìn t·∫°i!")
            return

        try:
            # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
            self.cursor.execute("SELECT COUNT(*) FROM taikhoangv WHERE USERNAME = %s", (username,))
            if self.cursor.fetchone()[0] > 0:
                messagebox.showwarning("L·ªói", "T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!")
                return

            # Th√™m t√†i kho·∫£n v√†o database
            query = "INSERT INTO taikhoangv (USERNAME, PASSWORD, QUYENHAN, ID_GIAOVIEN) VALUES (%s, %s, %s, %s)"
            self.cursor.execute(query, (username, password, quyen_value, id_giaovien))
            self.db.commit()

            messagebox.showinfo("Th√†nh c√¥ng", "Th√™m t√†i kho·∫£n th√†nh c√¥ng!")
            self.refresh_data()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m t√†i kho·∫£n: {e}")

    def edit_account(self):
        # Ki·ªÉm tra xem c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn hay kh√¥ng
        if not hasattr(self, "selected_account_id") or not self.selected_account_id:
            messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ ch·ªânh s·ª≠a!")
            return

        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c √¥ nh·∫≠p li·ªáu
        username = self.entry_widgets["entry_taikhoan"].get().strip()
        password = self.entry_widgets["entry_matkhau"].get().strip()  # N·∫øu mu·ªën thay ƒë·ªïi m·∫≠t kh·∫©u
        quyen = self.entry_widgets["combobox_quyenhan"].get()
        giaovien_name = self.entry_widgets["combobox_giaovien"].get()

        # Ki·ªÉm tra n·∫øu c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng
        if not username or not password:
            messagebox.showwarning("L·ªói", "T√™n t√†i kho·∫£n v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return

        # Chuy·ªÉn 'Quy·ªÅn H·∫°n' th√†nh gi√° tr·ªã s·ªë: 0 = Gi√°o vi√™n, 1 = Admin
        quyen_value = 1 if quyen == "Admin" else 0

        # T√¨m ID c·ªßa gi√°o vi√™n t·ª´ danh s√°ch
        teacher_id = next((id_ for name, id_ in self.giaovien_list.items() if name == giaovien_name), None)

        if teacher_id is None:
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y gi√°o vi√™n: {giaovien_name}")
            return

        # Chu·∫©n b·ªã truy v·∫•n SQL ƒë·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n
        query = """
              UPDATE taikhoangv
              SET USERNAME = %s, PASSWORD = %s, QUYENHAN = %s, ID_GIAOVIEN = %s
              WHERE ID_TKGV = %s
          """

        try:
            self.cursor.execute(query, (username, password, quyen_value, teacher_id, self.selected_account_id))
            self.db.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

            # C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu hi·ªÉn th·ªã tr√™n Treeview
            self.refresh_data()

            # V√¥ hi·ªáu h√≥a n√∫t ch·ªânh s·ª≠a sau khi c·∫≠p nh·∫≠t xong
            self.buttons["GV_btn_edit"].config(state=tk.DISABLED)

        except Exception as e:
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t t√†i kho·∫£n:\n{str(e)}")

    def delete_account(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn x√≥a!")
            return

        item = self.tree.item(selected_item[0])
        account_id = item["values"][0]

        confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n n√†y?")
        if not confirm:
            return

        try:
            query = "DELETE FROM taikhoangv WHERE ID_TKGV = %s"
            self.cursor.execute(query, (account_id,))
            self.db.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "X√≥a t√†i kho·∫£n th√†nh c√¥ng!")
            self.refresh_data()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n: {e}")

    def export_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if not file_path:
            return

        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["ID", "Username", "Quy·ªÅn H·∫°n", "Gi√°o Vi√™n"])

        for row in self.tree.get_children():
            values = self.tree.item(row)['values']
            account_id, username, quyenhan, giaovien_name = values

            # Chuy·ªÉn ƒë·ªïi quy·ªÅn h·∫°n t·ª´ s·ªë sang ch·ªØ
            # Ghi v√†o file Excel
            sheet.append([account_id, username, quyenhan, giaovien_name])

        workbook.save(file_path)
        messagebox.showinfo("Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng!")

    def show_statistics(self):
        # Th·ª±c hi·ªán truy v·∫•n SQL ƒë·ªÉ th·ªëng k√™ quy·ªÅn h·∫°n t√†i kho·∫£n
        self.cursor.execute("SELECT QUYENHAN, COUNT(*) FROM taikhoangv GROUP BY QUYENHAN")
        data = self.cursor.fetchall()

        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        if not data:
            messagebox.showinfo("Th·ªëng k√™", "Kh√¥ng c√≥ d·ªØ li·ªáu.")
            return

        # √Ånh x·∫° gi√° tr·ªã QUYENHAN (1: Admin, 0: Gi√°o vi√™n)
        role_map = {1: "Admin", 0: "Gi√°o vi√™n"}

        # Hi·ªÉn th·ªã th·ªëng k√™ quy·ªÅn h·∫°n t√†i kho·∫£n
        statistics = "\n".join([f"{role_map.get(row[0], 'Kh√¥ng x√°c ƒë·ªãnh')}: {row[1]} t√†i kho·∫£n" for row in data])

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ th·ªëng k√™ trong m·ªôt h·ªôp th√¥ng b√°o
        messagebox.showinfo("Th·ªëng k√™ quy·ªÅn h·∫°n t√†i kho·∫£n", statistics)

    def filter_accounts(self):
        selected_role = self.filter_role.get()

        # Chuy·ªÉn ƒë·ªïi vai tr√≤ th√†nh gi√° tr·ªã s·ªë (0 cho 'Gi√°o Vi√™n', 1 cho 'Admin')
        if selected_role == "T·∫•t c·∫£":
            query = "SELECT ID_TKGV, USERNAME, QUYENHAN, ID_GIAOVIEN FROM taikhoangv"
            self.cursor.execute(query)
        else:
            # X√°c ƒë·ªãnh gi√° tr·ªã s·ªë t∆∞∆°ng ·ª©ng v·ªõi vai tr√≤
            quyen_value = 1 if selected_role == "Admin" else 0

            query = "SELECT ID_TKGV, USERNAME, QUYENHAN, ID_GIAOVIEN FROM taikhoangv WHERE QUYENHAN = %s"
            self.cursor.execute(query, (quyen_value,))

        # X√≥a d·ªØ li·ªáu c≈© v√† c·∫≠p nh·∫≠t Treeview
        self.tree.delete(*self.tree.get_children())
        rows = self.cursor.fetchall()
        for row in rows:
            giaovien_name = next((name for name, id_ in self.giaovien_list.items() if id_ == row[3]), "")

            # Chuy·ªÉn ƒë·ªïi QUYENHAN t·ª´ s·ªë v·ªÅ d·∫°ng string ƒë·ªÉ hi·ªÉn th·ªã
            quyen = "Admin" if row[2] == 1 else "Gi√°o Vi√™n"

            self.tree.insert("", "end", values=(row[0], row[1], quyen, giaovien_name))

    def search_account(self):
        keyword = self.search_entry.get()

        query = "SELECT ID_TKGV, USERNAME, QUYENHAN, ID_GIAOVIEN FROM taikhoangv WHERE USERNAME LIKE %s"
        self.cursor.execute(query, (f"%{keyword}%",))
        rows = self.cursor.fetchall()

        # X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈© trong Treeview
        self.tree.delete(*self.tree.get_children())

        for row in rows:
            account_id, username, quyenhan, giaovien_id = row

            # Chuy·ªÉn ƒë·ªïi quy·ªÅn h·∫°n t·ª´ s·ªë sang ch·ªØ
            quyen_text = "Admin" if quyenhan == 1 else "Gi√°o vi√™n"

            # L·∫•y t√™n gi√°o vi√™n t·ª´ ID_GIAOVIEN
            giaovien_name = next((name for name, id_ in self.giaovien_list.items() if id_ == giaovien_id),
                                 "Kh√¥ng x√°c ƒë·ªãnh")

            # Ch√®n v√†o Treeview
            self.tree.insert("", "end", values=(account_id, username, quyen_text, giaovien_name))

    def refresh_data(self):
        """X√≥a d·ªØ li·ªáu nh·∫≠p v√†o v√† t·∫£i l·∫°i danh s√°ch t√†i kho·∫£n"""
        try:
            # X√≥a d·ªØ li·ªáu trong c√°c √¥ nh·∫≠p li·ªáu
            if "entry_taikhoan" in self.entry_widgets:
                self.entry_widgets["entry_taikhoan"].delete(0, tk.END)
            if "entry_matkhau" in self.entry_widgets:
                self.entry_widgets["entry_matkhau"].delete(0, tk.END)
            if "combobox_quyenhan" in self.entry_widgets:
                self.entry_widgets["combobox_quyenhan"].set("")  # Reset quy·ªÅn h·∫°n
            if "combobox_giaovien" in self.entry_widgets:
                self.entry_widgets["combobox_giaovien"].set("")  # Reset gi√°o vi√™n

            if hasattr(self, "search_entry"):
                self.search_entry.delete(0, tk.END)  # X√≥a √¥ t√¨m ki·∫øm
            if hasattr(self, "filter_role") and isinstance(self.filter_role, ttk.Combobox):
                self.filter_role.current(0)  # ƒê·∫∑t l·∫°i b·ªô l·ªçc v·ªÅ "T·∫•t c·∫£"

            # V√¥ hi·ªáu h√≥a c√°c button s·ª≠a & x√≥a n·∫øu kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn
            if hasattr(self, "edit_button"):
                self.edit_button.config(state="disabled")
            if hasattr(self, "delete_button"):
                self.delete_button.config(state="disabled")

            # Load l·∫°i d·ªØ li·ªáu danh s√°ch t√†i kho·∫£n
            self.load_data()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l√†m m·ªõi d·ªØ li·ªáu: {e}")

    def on_treeview_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn m·ªôt t√†i kho·∫£n gi√°o vi√™n trong Treeview"""

        # L·∫•y m·ª•c ƒë∆∞·ª£c ch·ªçn trong Treeview
        selected_item = self.tree.selection()
        if not selected_item:
            return  # Kh√¥ng c√≥ m·ª•c n√†o ƒë∆∞·ª£c ch·ªçn, tho√°t kh·ªèi h√†m

        # L·∫•y c√°c gi√° tr·ªã t·ª´ m·ª•c ƒë√£ ch·ªçn
        item = self.tree.item(selected_item[0])
        values = item.get("values", [])

        # Ki·ªÉm tra xem c√≥ ƒë·ªß d·ªØ li·ªáu hay kh√¥ng
        if len(values) < 5:
            return  # N·∫øu d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß, tho√°t kh·ªèi h√†m ƒë·ªÉ tr√°nh l·ªói

        account_id, username, password, quyen, giaovien_name = values

        # L∆∞u ID t√†i kho·∫£n ƒë√£ ch·ªçn ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        self.selected_account_id = account_id

        # ƒêi·ªÅn d·ªØ li·ªáu v√†o c√°c √¥ nh·∫≠p li·ªáu
        self.entry_widgets["entry_taikhoan"].delete(0, tk.END)
        self.entry_widgets["entry_taikhoan"].insert(0, username)

        # Hi·ªÉn th·ªã m·∫≠t kh·∫©u b√¨nh th∆∞·ªùng
        self.entry_widgets["entry_matkhau"].delete(0, tk.END)
        self.entry_widgets["entry_matkhau"].insert(0, password)

        # ƒê·∫∑t gi√° tr·ªã cho combobox quy·ªÅn h·∫°n
        self.entry_widgets["combobox_quyenhan"].set(quyen)

        # ƒê·∫∑t gi√° tr·ªã cho combobox gi√°o vi√™n
        self.entry_widgets["combobox_giaovien"].set(giaovien_name)

        # K√≠ch ho·∫°t n√∫t s·ª≠a v√† x√≥a
        self.buttons["GV_btn_edit"].config(state="normal")
        self.buttons["GV_btn_delete"].config(state="normal")

    # Sinh Vi√™n
    def load_sinh_vien(self):
        """Load danh s√°ch sinh vi√™n v√†o combobox"""
        self.cursor.execute("SELECT ID_SINHVIEN, TENSINHVIEN FROM sinhvien")
        self.sinhvien_list = {row[1]: row[0] for row in self.cursor.fetchall()}  # L∆∞u t√™n sinh vi√™n v√† ID t∆∞∆°ng ·ª©ng
        # C·∫≠p nh·∫≠t danh s√°ch v√†o Combobox
        combobox = self.entry_widgets_SV["combobox_sinhvien"]
        combobox["values"] = list(self.sinhvien_list.keys())   # G√°n danh s√°ch v√†o Combobox

    def load_data_sv(self):
        """T·∫£i danh s√°ch t√†i kho·∫£n sinh vi√™n v√†o Treeview"""

        # X√≥a d·ªØ li·ªáu c≈© tr√™n tree_sv tr∆∞·ªõc khi t·∫£i m·ªõi
        self.tree_sv.delete(*self.tree_sv.get_children())

        # Truy v·∫•n l·∫•y d·ªØ li·ªáu t√†i kho·∫£n sinh vi√™n, bao g·ªìm m·∫≠t kh·∫©u
        query = "SELECT ID_TKSV, USERNAME, PASSWORD, ID_SINHVIEN FROM taikhoansv"
        self.cursor.execute(query)
        rows = self.cursor.fetchall()

        for row in rows:
            # L·∫•y t√™n sinh vi√™n t·ª´ ID_SINHVIEN
            sinhvien_name = next((name for name, id_ in self.sinhvien_list.items() if id_ == row[3]), "Kh√¥ng x√°c ƒë·ªãnh")

            # Hi·ªÉn th·ªã m·∫≠t kh·∫©u ƒë·∫ßy ƒë·ªß
            password = row[2]

            # Ch√®n d·ªØ li·ªáu v√†o b·∫£ng Treeview
            self.tree_sv.insert("", "end", values=(row[0], row[1], password, sinhvien_name))
    def add_student(self):
        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c Entry v√† Combobox
        username = self.entry_widgets_SV["entry_taikhoan"].get().strip()
        password = self.entry_widgets_SV["entry_matkhau"].get().strip()
        sinhvien = self.entry_widgets_SV["combobox_sinhvien"].get().strip()

        # Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
        if not username or not password or not sinhvien:
            messagebox.showwarning("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return

        # Ki·ªÉm tra ID sinh vi√™n t·ª´ danh s√°ch (n·∫øu c√≥)
        id_sv = self.sinhvien_list.get(sinhvien, None)
        if id_sv is None:
            messagebox.showwarning("L·ªói", "Sinh vi√™n kh√¥ng h·ª£p l·ªá!")
            return

        try:
            # Ch√®n d·ªØ li·ªáu v√†o b·∫£ng 'taikhoansv'
            query = "INSERT INTO taikhoansv (USERNAME, PASSWORD, ID_SINHVIEN) VALUES (%s, %s, %s)"
            self.cursor.execute(query, (username, password, id_sv))
            self.db.commit()  # L∆∞u v√†o CSDL

            messagebox.showinfo("Th√†nh c√¥ng", "Th√™m sinh vi√™n th√†nh c√¥ng!")
            self.refresh_student_data()  # L√†m m·ªõi danh s√°ch sinh vi√™n

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m sinh vi√™n: {e}")

    def edit_student(self):
        """C·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n sau khi ch·ªânh s·ª≠a"""

        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c √¥ nh·∫≠p li·ªáu
        username = self.entry_widgets_SV["entry_taikhoan"].get().strip()
        password = self.entry_widgets_SV["entry_matkhau"].get().strip()  # N·∫øu ng∆∞·ªùi d√πng mu·ªën thay ƒë·ªïi m·∫≠t kh·∫©u
        sinhvien_name = self.entry_widgets_SV["combobox_sinhvien"].get().strip()

        # Ki·ªÉm tra n·∫øu ch∆∞a ch·ªçn sinh vi√™n n√†o ƒë·ªÉ ch·ªânh s·ª≠a
        if not hasattr(self, "selected_student_id") or not self.selected_student_id:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn m·ªôt sinh vi√™n ƒë·ªÉ ch·ªânh s·ª≠a!")
            return

        # Ki·ªÉm tra xem c√°c tr∆∞·ªùng nh·∫≠p li·ªáu c√≥ h·ª£p l·ªá kh√¥ng
        if not username or not password or not sinhvien_name:
            messagebox.showwarning("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return

        # L·∫•y ID sinh vi√™n t·ª´ t√™n sinh vi√™n ƒë∆∞·ª£c ch·ªçn
        student_id = self.sinhvien_list.get(sinhvien_name, None)

        # N·∫øu kh√¥ng t√¨m th·∫•y sinh vi√™n trong danh s√°ch, hi·ªÉn th·ªã l·ªói
        if student_id is None:
            messagebox.showerror("L·ªói", "Sinh vi√™n kh√¥ng t·ªìn t·∫°i!")
            return

        # Chu·∫©n b·ªã c√¢u l·ªánh SQL ƒë·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n sinh vi√™n
        query = "UPDATE taikhoansv SET USERNAME = %s, PASSWORD = %s, ID_SINHVIEN = %s WHERE ID_TKSV = %s"

        try:
            self.cursor.execute(query, (username, password, student_id, self.selected_student_id))
            self.db.commit()  # L∆∞u thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu

            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n th√†nh c√¥ng!")

            # L√†m m·ªõi danh s√°ch sinh vi√™n sau khi c·∫≠p nh·∫≠t
            self.refresh_student_data()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n: {e}")

    def delete_student(self):
        selected_item = self.tree_sv.selection()
        if not selected_item:
            messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn x√≥a!")
            return

        item = self.tree_sv.item(selected_item[0])
        student_id = item["values"][0]  # Gi·∫£ s·ª≠ c·ªôt ID sinh vi√™n l√† c·ªôt ƒë·∫ßu ti√™n

        confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n n√†y?")
        if not confirm:
            return

        try:
            # C√¢u l·ªánh SQL ƒë·ªÉ x√≥a t√†i kho·∫£n sinh vi√™n d·ª±a tr√™n ID
            query = "DELETE FROM taikhoansv WHERE ID_TKSV = %s"
            self.cursor.execute(query, (student_id,))
            self.db.commit()

            messagebox.showinfo("Th√†nh c√¥ng", "X√≥a t√†i kho·∫£n sinh vi√™n th√†nh c√¥ng!")
            self.refresh_student_data()  # L√†m m·ªõi l·∫°i d·ªØ li·ªáu sau khi x√≥a

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n sinh vi√™n: {e}")

    def refresh_student_data(self):
        """X√≥a d·ªØ li·ªáu nh·∫≠p v√†o v√† t·∫£i l·∫°i danh s√°ch t√†i kho·∫£n sinh vi√™n"""

        # X√≥a d·ªØ li·ªáu trong c√°c √¥ nh·∫≠p li·ªáu
        self.entry_widgets_SV["entry_taikhoan"].delete(0, tk.END)
        self.entry_widgets_SV["entry_matkhau"].delete(0, tk.END)
        self.entry_widgets_SV["combobox_sinhvien"].set("")  # Reset combobox sinh vi√™n

        # Ki·ªÉm tra n·∫øu √¥ t√¨m ki·∫øm t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a d·ªØ li·ªáu
        if hasattr(self, "search_student_entry"):
            self.search_student_entry.delete(0, tk.END)  # X√≥a √¥ t√¨m ki·∫øm
        # ƒê·∫∑t l·∫°i tr·∫°ng th√°i c·ªßa c√°c n√∫t "S·ª≠a" v√† "X√≥a"
        if "btn_edit_student" in self.buttons_SV:
            self.buttons_SV["btn_edit_student"].config(state="disabled")
        if "btn_delete_student" in self.buttons_SV:
            self.buttons_SV["btn_delete_student"].config(state="disabled")

        # T·∫£i l·∫°i d·ªØ li·ªáu danh s√°ch sinh vi√™n v√†o treeview
        self.load_sinh_vien()  # H√†m n√†y c·∫ßn ph·∫£i load l·∫°i d·ªØ li·ªáu t·ª´ CSDL v√† hi·ªÉn th·ªã l√™n Treeview
        self.load_data_sv()  # N·∫øu c·∫ßn, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng th√™m h√†m n√†y ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu sinh vi√™n v√†o giao di·ªán.

    def search_student(self):
        keyword = self.search_student_entry.get().strip()  # L·∫•y t·ª´ kh√≥a t·ª´ √¥ t√¨m ki·∫øm

        # C√¢u l·ªánh SQL s·ª≠ d·ª•ng JOIN ƒë·ªÉ l·∫•y t√™n sinh vi√™n t·ª´ b·∫£ng sinhvien
        query = """
            SELECT t.ID_TKSV, t.USERNAME, s.TENSINHVIEN
            FROM taikhoansv t
            JOIN sinhvien s ON t.ID_SINHVIEN = s.ID_SINHVIEN
            WHERE t.USERNAME LIKE %s
        """

        try:
            self.cursor.execute(query, (f"%{keyword}%",))
            rows = self.cursor.fetchall()

            # X√≥a d·ªØ li·ªáu c≈© trong Treeview
            self.tree_sv.delete(*self.tree_sv.get_children())

            # Th√™m d·ªØ li·ªáu m·ªõi v√†o b·∫£ng Treeview
            for row in rows:
                self.tree_sv.insert("", "end", values=row)  # Ch√®n tr·ª±c ti·∫øp v√¨ row ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói t√¨m ki·∫øm sinh vi√™n: {e}")

    def export_students_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if not file_path:
            return

        workbook = openpyxl.Workbook()
        sheet = workbook.active

        # C·∫≠p nh·∫≠t t√™n c·ªôt theo th√¥ng tin sinh vi√™n
        sheet.append(["ID", "Username", "Sinh Vi√™n"])

        # L·∫•y d·ªØ li·ªáu t·ª´ Treeview ch·ª©a sinh vi√™n (self.tree_sv)
        for row in self.tree_sv.get_children():
            sheet.append(self.tree_sv.item(row)['values'])

        workbook.save(file_path)
        messagebox.showinfo("Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng!")

    def show_student_statistics(self):
        # Th·ªëng k√™ t·ªïng s·ªë t√†i kho·∫£n v√† t·ªïng s·ªë sinh vi√™n c√≥ t√†i kho·∫£n
        self.cursor.execute("SELECT COUNT(DISTINCT ID_SINHVIEN) FROM taikhoansv")
        total_students = self.cursor.fetchone()[0]  # T·ªïng s·ªë sinh vi√™n c√≥ t√†i kho·∫£n

        self.cursor.execute("SELECT COUNT(*) FROM taikhoansv")
        total_accounts = self.cursor.fetchone()[0]  # T·ªïng s·ªë t√†i kho·∫£n

        # Hi·ªÉn th·ªã th·ªëng k√™
        statistics = f"T·ªïng s·ªë t√†i kho·∫£n: {total_accounts}\nT·ªïng s·ªë sinh vi√™n c√≥ t√†i kho·∫£n: {total_students}"

        messagebox.showinfo("Th·ªëng k√™ t√†i kho·∫£n sinh vi√™n", statistics)

    def on_treeview_select_student(self, event):
        """X·ª≠ l√Ω khi ch·ªçn m·ªôt sinh vi√™n trong Treeview"""

        # L·∫•y m·ª•c ƒë∆∞·ª£c ch·ªçn trong Treeview
        selected_item = self.tree_sv.selection()
        if not selected_item:
            return  # Kh√¥ng c√≥ m·ª•c n√†o ƒë∆∞·ª£c ch·ªçn, tho√°t kh·ªèi h√†m

        # L·∫•y c√°c gi√° tr·ªã t·ª´ m·ª•c ƒë√£ ch·ªçn
        item = self.tree_sv.item(selected_item[0])
        values = item.get("values", [])

        # Ki·ªÉm tra xem c√≥ ƒë·ªß d·ªØ li·ªáu hay kh√¥ng
        if len(values) < 4:
            return  # N·∫øu d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß, tho√°t kh·ªèi h√†m ƒë·ªÉ tr√°nh l·ªói

        student_id, username, password, sinhvien_name = values

        # L∆∞u ID sinh vi√™n ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        self.selected_student_id = student_id

        # ƒêi·ªÅn d·ªØ li·ªáu v√†o c√°c √¥ nh·∫≠p li·ªáu
        self.entry_widgets_SV["entry_taikhoan"].delete(0, tk.END)
        self.entry_widgets_SV["entry_taikhoan"].insert(0, username)

        # Hi·ªÉn th·ªã m·∫≠t kh·∫©u b√¨nh th∆∞·ªùng
        self.entry_widgets_SV["entry_matkhau"].delete(0, tk.END)
        self.entry_widgets_SV["entry_matkhau"].insert(0, password)

        # ƒêi·ªÅn t√™n sinh vi√™n v√†o combobox
        self.entry_widgets_SV["combobox_sinhvien"].set(sinhvien_name)

        # K√≠ch ho·∫°t c√°c n√∫t "S·ª≠a" v√† "X√≥a" khi c√≥ sinh vi√™n ƒë∆∞·ª£c ch·ªçn
        if "btn_edit_student" in self.buttons_SV:
            self.buttons_SV["btn_edit_student"].config(state="normal")
        if "btn_delete_student" in self.buttons_SV:
            self.buttons_SV["btn_delete_student"].config(state="normal")