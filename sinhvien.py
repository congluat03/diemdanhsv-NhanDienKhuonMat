import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkcalendar import DateEntry
import mysql.connector
import csv
import openpyxl
from io import BytesIO
from PIL import Image, ImageTk
import matplotlib.pyplot as plt

class QuanLySinhVien:
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        self.cursor = db.cursor()
        self.create_ui()

    def create_ui(self):
        tk.Label(self.parent, text="Qu·∫£n L√Ω Sinh Vi√™n", font=("Arial", 16, "bold"), fg="white", bg="blue").pack(pady=10, fill=tk.X)

        # Khung nh·∫≠p th√¥ng tin sinh vi√™n
        form_frame = tk.Frame(self.parent, bg="lightgray", padx=10, pady=10)
        form_frame.pack(pady=10, fill=tk.X)

        tk.Label(form_frame, text="H·ªç T√™n:", bg="lightgray").grid(row=0, column=0, padx=5, pady=5)
        self.name_entry = tk.Entry(form_frame)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(form_frame, text="Ng√†y Sinh:", bg="lightgray").grid(row=1, column=0, padx=5, pady=5)
        self.dob_entry = DateEntry(form_frame, width=18, background="blue", foreground="black", date_pattern="dd-MM-yyyy")
        self.dob_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(form_frame, text="Gi·ªõi T√≠nh:", bg="lightgray").grid(row=2, column=0, padx=5, pady=5)
        self.gender_combobox = ttk.Combobox(form_frame, values=["Nam", "N·ªØ", "Kh√°c"], width=18)
        self.gender_combobox.grid(row=2, column=1, padx=5, pady=5)

        tk.Label(form_frame, text="L·ªõp H·ªçc:", bg="lightgray").grid(row=3, column=0, padx=5, pady=5)
        self.class_combobox = ttk.Combobox(form_frame, width=18)
        self.class_combobox.grid(row=3, column=1, padx=5, pady=5)
        self.load_classes()  # G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch l·ªõp h·ªçc


        # N√∫t th√™m, s·ª≠a, x√≥a
        button_frame = tk.Frame(self.parent, bg="white")
        button_frame.pack(pady=10)
        tk.Button(button_frame, text="Th√™m", bg="green", fg="black", command=self.add_student).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="S·ª≠a", bg="orange", fg="black", command=self.edit_student).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="X√≥a", bg="red", fg="black", command=self.delete_student).pack(side=tk.LEFT, padx=5)

        # T·∫°o khung t√¨m ki·∫øm v√† l·ªçc d·ªØ li·ªáu
        filter_frame = tk.Frame(self.parent)
        filter_frame.pack(pady=5, fill=tk.X)

        tk.Label(filter_frame, text="T√¨m ki·∫øm:").pack(side=tk.LEFT, padx=5)
        self.search_entry = tk.Entry(filter_frame)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="üîç", command=self.search_student).pack(side=tk.LEFT, padx=5)

        tk.Label(filter_frame, text="L·ªçc theo gi·ªõi t√≠nh:").pack(side=tk.LEFT, padx=5)
        self.filter_gender = ttk.Combobox(filter_frame, values=["T·∫•t c·∫£", "Nam", "N·ªØ", "Kh√°c"], width=10)
        self.filter_gender.current(0)
        self.filter_gender.pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="L·ªçc", command=self.filter_students).pack(side=tk.LEFT, padx=5)

        tk.Button(filter_frame, text="Xu·∫•t CSV", command=self.export_to_csv).pack(side=tk.RIGHT, padx=5)
        tk.Button(filter_frame, text="Xu·∫•t Excel", command=self.export_to_excel).pack(side=tk.RIGHT, padx=5)
        tk.Button(filter_frame, text="Th·ªëng k√™", command=self.show_statistics).pack(side=tk.RIGHT, padx=5)

        # T·∫°o Treeview ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch sinh vi√™n
        columns = ("ID", "H·ªç T√™n", "Ng√†y Sinh", "Gi·ªõi T√≠nh", "L·ªõp H·ªçc")
        self.tree = ttk.Treeview(self.parent, columns=columns, show="headings")
        self.tree.pack(expand=True, fill=tk.BOTH)

        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150)

        self.load_data()
        self.tree.bind("<ButtonRelease-1>", self.select_sinhvien)  # L·∫•y d·ªØ li·ªáu khi click v√†o d√≤ng

    def select_sinhvien(self, event):
        """L·∫•y d·ªØ li·ªáu t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã l√™n form nh·∫≠p"""
        selected_item = self.tree.selection()
        if not selected_item:
            return

        item = self.tree.item(selected_item, "values")

        # ƒêi·ªÅn th√¥ng tin m√¥n h·ªçc v√†o √¥ nh·∫≠p
        self.name_entry.delete(0, tk.END)
        self.name_entry.insert(0, item[1])

        self.dob_entry.delete(0, tk.END)
        self.dob_entry.insert(0, item[2])

        # C·∫≠p nh·∫≠t Combobox ch·ªçn l·ªõp h·ªçc v√† gi√°o vi√™n
        selected_gender = item[3] if len(item) > 3 else ""
        self.gender_combobox.set(selected_gender)

        # C·∫≠p nh·∫≠t Combobox ch·ªçn l·ªõp h·ªçc v√† gi√°o vi√™n
        selected_lop = item[4] if len(item) > 4 else ""
        self.class_combobox.set(selected_lop)


    def add_student(self):
        name = self.name_entry.get()
        dob = self.dob_entry.get_date().strftime("%Y-%m-%d")  # Khi l∆∞u v√†o database
        gender_text = self.gender_combobox.get()
        class_name = self.class_combobox.get()

        # Chuy·ªÉn gi·ªõi t√≠nh t·ª´ ch·ªØ th√†nh s·ªë
        gender_map = {"Nam": 0, "N·ªØ": 1, "Kh√°c": 2}
        gender = gender_map.get(gender_text, 2)

        class_id = self.get_class_id(class_name)
        if class_id is None:
            return

        query = "INSERT INTO sinhvien (TENSINHVIEN, NGAYSINH, GIOITINH, ID_LOP) VALUES (%s, %s, %s, %s)"
        self.cursor.execute(query, (name, dob, gender, class_id))
        self.db.commit()
        messagebox.showinfo("Th√†nh c√¥ng", "Th√™m sinh vi√™n th√†nh c√¥ng!")
        self.load_data()

    def edit_student(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn sinh vi√™n c·∫ßn s·ª≠a!")
            return

        item = self.tree.item(selected_item)
        student_id = item['values'][0]
        name = self.name_entry.get()
        dob = self.dob_entry.get_date().strftime("%Y-%m-%d")  # Khi l∆∞u v√†o database

        gender_str = self.gender_combobox.get()
        gender = 0 if gender_str == "Nam" else 1  # Chuy·ªÉn ƒë·ªïi sang s·ªë

        class_name = self.class_combobox.get()
        class_id = self.get_class_id(class_name)

        if class_id is None:
            return

        query = "UPDATE sinhvien SET TENSINHVIEN=%s, NGAYSINH=%s, GIOITINH=%s, ID_LOP=%s WHERE ID_SINHVIEN=%s"
        self.cursor.execute(query, (name, dob, gender, class_id, student_id))
        self.db.commit()

        messagebox.showinfo("Th√†nh c√¥ng", "S·ª≠a th√¥ng tin sinh vi√™n th√†nh c√¥ng!")
        self.load_data()

    def delete_student(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn sinh vi√™n c·∫ßn x√≥a!")
            return

        item = self.tree.item(selected_item)
        student_id = item['values'][0]
        confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a sinh vi√™n n√†y?")
        if confirm:
            query = "DELETE FROM sinhvien WHERE ID_SINHVIEN=%s"
            self.cursor.execute(query, (student_id,))
            self.db.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "X√≥a sinh vi√™n th√†nh c√¥ng!")
            self.load_data()

    def load_data(self, condition=""):
        self.tree.delete(*self.tree.get_children())
        query = "SELECT ID_SINHVIEN, TENSINHVIEN, NGAYSINH, GIOITINH, ID_LOP FROM sinhvien" + condition
        self.cursor.execute(query)
        rows = self.cursor.fetchall()
        for row in rows:
            row = list(row)
            row[2] = row[2].strftime("%d/%m/%Y")  # Chuy·ªÉn ƒë·ªïi ng√†y sinh
            row[3] = row[3]  # Gi·ªõi t√≠nh gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng
            row[4] = self.get_class_name(row[4])  # Thay ID l·ªõp b·∫±ng t√™n l·ªõp
            self.tree.insert("", "end", values=row)

    def load_classes(self):
        """L·∫•y danh s√°ch l·ªõp t·ª´ CSDL v√† c·∫≠p nh·∫≠t v√†o combobox"""
        query = "SELECT TENLOP FROM lophoc"
        self.cursor.execute(query)
        classes = [row[0] for row in self.cursor.fetchall()]
        self.class_combobox['values'] = classes  # G√°n danh s√°ch l·ªõp v√†o combobox

    def get_class_name(self, class_id):
        query = "SELECT TENLOP FROM lophoc WHERE ID_LOP=%s"
        self.cursor.execute(query, (class_id,))
        result = self.cursor.fetchone()

        if result is None:
            return "Kh√¥ng x√°c ƒë·ªãnh"  # N·∫øu kh√¥ng t√¨m th·∫•y l·ªõp, tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh tr√°nh l·ªói

        return result[0]

    def get_class_id(self, class_name):
        query = "SELECT ID_LOP FROM lophoc WHERE TENLOP=%s"
        self.cursor.execute(query, (class_name,))
        result = self.cursor.fetchone()

        if result is None:
            messagebox.showerror("L·ªói", f"L·ªõp h·ªçc '{class_name}' kh√¥ng t·ªìn t·∫°i!")
            return None  # Tr√°nh l·ªói truy c·∫≠p ph·∫ßn t·ª≠ tr√™n None

        return result[0]
    def search_student(self):
        keyword = self.search_entry.get()
        condition = f" WHERE TENSINHVIEN LIKE '%{keyword}%'"
        self.load_data(condition)

    def filter_students(self):
        gender = self.filter_gender.get()
        if gender == "T·∫•t c·∫£":
            self.load_data()
        else:
            condition = f" WHERE GIOITINH = '{gender}'"
            self.load_data(condition)

    def export_to_csv(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
        if not file_path:
            return

        with open(file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "H·ªç T√™n", "Ng√†y Sinh", "Gi·ªõi T√≠nh", "L·ªõp H·ªçc"])
            for row in self.tree.get_children():
                writer.writerow(self.tree.item(row)['values'])

        messagebox.showinfo("Th√†nh c√¥ng", "Xu·∫•t file CSV th√†nh c√¥ng!")

    def export_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if not file_path:
            return

        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["ID", "H·ªç T√™n", "Ng√†y Sinh", "Gi·ªõi T√≠nh", "L·ªõp H·ªçc"])

        for row in self.tree.get_children():
            sheet.append(self.tree.item(row)['values'])

        workbook.save(file_path)
        messagebox.showinfo("Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng!")

    def export_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if not file_path:
            return

        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["ID", "H·ªç T√™n", "Ng√†y Sinh", "Gi·ªõi T√≠nh", "L·ªõp H·ªçc"])

        for row in self.tree.get_children():
            sheet.append(self.tree.item(row)['values'])

        workbook.save(file_path)
        messagebox.showinfo("Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng!")

    def show_statistics(self):
        # L·∫•y th·ªëng k√™ gi·ªõi t√≠nh
        self.cursor.execute("SELECT GIOITINH, COUNT(*) FROM sinhvien GROUP BY GIOITINH")
        data = self.cursor.fetchall()
        labels = ["Nam", "N·ªØ", "Kh√°c"]
        sizes = [0, 0, 0]

        for row in data:
            if row[0] == "Nam":
                sizes[0] = row[1]
            elif row[0] == "N·ªØ":
                sizes[1] = row[1]
            else:
                sizes[2] = row[1]

        # T·∫°o bi·ªÉu ƒë·ªì h√¨nh tr√≤n
        fig, ax = plt.subplots()
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', colors=['blue', 'pink', 'gray'])
        ax.set_title("Th·ªëng k√™ gi·ªõi t√≠nh sinh vi√™n")

        # L∆∞u bi·ªÉu ƒë·ªì v√†o b·ªô ƒë·ªám
        buffer = BytesIO()
        plt.savefig(buffer, format='png')
        buffer.seek(0)
        img = Image.open(buffer)
        img = ImageTk.PhotoImage(img)

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì h√¨nh tr√≤n trong c·ª≠a s·ªï popup
        popup = tk.Toplevel()
        popup.title("Th·ªëng k√™")
        tk.Label(popup, image=img).pack()
        popup.mainloop()
